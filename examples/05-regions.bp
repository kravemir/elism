fn array_foo_default (i64[] a, i64[] b) -> i32 {
    return a.length * 10 + b.length;
}

fn array_foo_named_default @FOO_DEFAULT (i64[] @FOO_DEFAULT a, i64[] @FOO_DEFAULT b) -> i32 {
    return a.length * 10 + b.length;
}

fn array_foo_two @FOO_A, @FOO_B (i64[] @FOO_A a, i64[] @FOO_B b) -> i32 {
    return a.length * 10 + b.length;
}

fn test_array_foos() {
    var a1 = [0;4];

    // implicit current region, no inference, yet!
    let i1 = array_foo_default (a1,a1);
    let i2 = array_foo_named_default (a1,a1);

    on TMP = NewRegion() {
        var a2 = [0;2];

        // implicit current region, no inference, yet!
        let i3 = array_foo_default (a2,a2);
        let i4 = array_foo_named_default (a2,a2);
        printf("arrays => i1: %d, i2: %d, i3: %d, i4: %d\n", i1, i2, i3, i4);

        // explicit region
        let e1 = array_foo_default @fn_default (a1,a1);
        let e2 = array_foo_named_default @fn_default (a1,a1);
        let e3 = array_foo_default @TMP (a2,a2);
        let e4 = array_foo_named_default @TMP (a2,a2);
        printf("arrays => e1: %d, e2: %d, e3: %d, e4: %d\n", e1, e2, e3, e4);

        // explicit regions
        let ee1 = array_foo_two @fn_default, @TMP (a1,a2);
        let ee2 = array_foo_two @TMP, @fn_default (a2,a1);
        printf("arrays => ee1: %d, ee2: %d\n", ee1, ee2);
    }
}

class A {
    var length = 0;
}

fn class_foo_default (A a, A b) -> i32 {
    return a.length * 10 + b.length;
}

fn class_foo_named_default @FOO_DEFAULT (A @FOO_DEFAULT a, A @FOO_DEFAULT b) -> i32 {
    return a.length * 10 + b.length;
}

fn class_foo_two @FOO_A, @FOO_B (A @FOO_A a, A @FOO_B b) -> i32 {
    return a.length * 10 + b.length;
}

fn test_class_foos() {
    var a1 = A();
    a1.length = 4;

    // implicit current region, no inference, yet!
    let i1 = class_foo_default (a1,a1);
    let i2 = class_foo_named_default (a1,a1);

    on TMP = NewRegion() {
        var a2 = A();
        a2.length = 2;

        // implicit current region, no inference, yet!
        let i3 = class_foo_default (a2,a2);
        let i4 = class_foo_named_default (a2,a2);
        printf("classes => i1: %d, i2: %d, i3: %d, i4: %d\n", i1, i2, i3, i4);

        // explicit region
        let e1 = class_foo_default @fn_default (a1,a1);
        let e2 = class_foo_named_default @fn_default (a1,a1);
        let e3 = class_foo_default @TMP (a2,a2);
        let e4 = class_foo_named_default @TMP (a2,a2);
        printf("classes => e1: %d, e2: %d, e3: %d, e4: %d\n", e1, e2, e3, e4);

        // explicit regions
        let ee1 = class_foo_two @fn_default, @TMP (a1,a2);
        let ee2 = class_foo_two @TMP, @fn_default (a2,a1);
        printf("classes => ee1: %d, ee2: %d\n", ee1, ee2);
    }
}

fn class_array_foo @FOO_A, @FOO_B (A @FOO_A [] @FOO_B array) -> i32 {
    return array.length * 10 + array[0].length;
}

fn test_class_array() {
    var a_instance = A();
    a_instance.length = 2;

    on TMP = NewRegion() {
        var array = [a_instance; 4];

        // implicit current region, no inference, yet!
        let result = class_array_foo @fn_default, @TMP (array);
        printf("class-array => result: %d\n", result);
    }
}

fn return_foo_default () -> i64[] {
    return [0; 21];
}

fn return_foo_named_default @FOO_A () -> i64[] @FOO_A {
    return [0; 42];
}

fn test_returns() {
    // implicit current region, no inference, yet!
    let i1 = return_foo_default().length;
    let i2 = return_foo_named_default().length;

    on TMP = NewRegion() {
        // implicit current region, no inference, yet!
        let i3 = return_foo_default().length;
        let i4 = return_foo_named_default().length;
        printf("returns => i1: %d, i2: %d, i3: %d, i4: %d\n", i1, i2, i3, i4);

        // explicit region
        let e1 = return_foo_default @fn_default ().length;
        let e2 = return_foo_named_default @fn_default ().length;
        let e3 = return_foo_default @TMP ().length;
        let e4 = return_foo_named_default @TMP ().length;
        printf("returns => e1: %d, e2: %d, e3: %d, e4: %d\n", e1, e2, e3, e4);
    }
}

fn main() -> i32 {
    test_array_foos();
    test_class_foos();
    test_class_array();
    test_returns();
    return 0;
}