fn solveKnapsack @r, @d (i64[] @d weights, i64[] @d values, i64 maxWeight) -> i64[] @r
{
    var m_current = [ 0; maxWeight + 1 ];
    var m_previous = [ 0; maxWeight + 1 ];
    var m_tmp = [ 0; maxWeight + 1 ];

    for( item: range(0,values.length) ) {
        for( w: range(0,maxWeight+1) ) {
            m_current[w] = m_previous[w];
            if( weights[item] <= w ) {
                if(m_current[w] < m_previous[w-weights[item]] + values[item])
                    m_current[w] = m_previous[w-weights[item]] + values[item];
            }
        }
        m_tmp = m_current;
        m_current = m_previous;
        m_previous = m_tmp;
    }
    return m_previous;
}

fn main () -> i32 {
    let weights = [ 2, 5, 7, 8, 3, 4, 6, 9, 1 ];
    let values =  [ 3, 1, 4, 2, 7, 5, 6, 8, 9 ];
    let maxWeight = 17;

    printf("Max weight: %d\n", maxWeight);
    printf("Number of items: %d\n", values.length);

    on TMP = NewRegion() {
        let result = solveKnapsack @TMP, @fn_default ( weights, values, maxWeight );

        for( lw : range(0,maxWeight+1) ) {
            printf("last results %d: %d\n", lw, result[lw]);
        }
    }

    return 0;
}
